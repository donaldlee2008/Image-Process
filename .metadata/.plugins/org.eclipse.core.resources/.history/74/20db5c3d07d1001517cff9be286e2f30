//=========================================================================================
//
// Project: IP-LAB Developer Tools 2016 - Teaching Image-Processing Programming in Java
//
// Author : Daniel Sage, Biomedical Imaging Group (BIG), http://bigwww.epfl.ch/
//
//=========================================================================================

import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.WindowManager;
import ij.gui.Line;
import ij.gui.OvalRoi;
import ij.gui.Overlay;
import ij.gui.Roi;
import ij.gui.StackWindow;
import ij.gui.TextRoi;
import ij.io.Opener;
import ij.process.ByteProcessor;
import ij.process.ColorProcessor;
import ij.process.FloatProcessor;
import ij.process.ImageProcessor;

import java.awt.Color;
import java.io.File;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * This is the prime class of the Image-Processing Laboratories. The image is
 * always store in double. This class contains a collection of methods that
 * facilitates the access to the pixel level.
 * 
 * Version: September 2015
 * 
 * <div style="background-color:#DDDDEE; padding:4px; border:1px dotted blue">
 * <b>Project</b>: <a href="http://bigwww.epfl.ch/iplab/">IP-LAB</a>, Teaching
 * Image Processing Programming in Java</br> <b>Contact</b>: <a href =
 * "mailto:daniel.sage@epfl.ch">Daniel Sage</a>, <a href =
 * "http://bigwww.epfl.ch">Biomedical Imaging Group</a>, EPFL, Lausanne,
 * Switzerland</br> <b>Reference</b>: <a href =
 * "http://bigwww.epfl.ch/publications/sage0303.html">Teaching Image-Processing
 * Programming in Java</a>, IEEE Signal Processing Magazine <b>20</b>, November
 * 2003 </div>
 */

public class ImageAccess {

	/**
	 * Array of pixels in double stored row by rows.
	 */
	public double	pixels[]	= null;

	/**
	 * Horizontal size of the image.
	 */
	public int		nx;

	/**
	 * Vertical size of the image.
	 */
	public int		ny;

	/**
	 * Title of the image.
	 */
	private String	title		= "untitled";

	/**
	 * Create an ImageAccess object from the current selected ImagePlus.
	 */
	public ImageAccess() {
		ImagePlus imp = IJ.getImage();
		exception(imp == null, "Unable to create an ImageAccess. No open image");
		title = imp.getTitle();
		create(imp.getStack().getProcessor(1));
	}

	/**
	 * Create am ImageAccess object from ImagePlus specified by its name.
	 * 
	 * @param name
	 *            Name of the ImagePlus object.
	 */
	public ImageAccess(String name) {
		exception(name == null, "Unable to create an ImageAccess, name is undefined");
		ImagePlus imp = WindowManager.getImage(name);
		exception(imp == null, "Unable to create an ImageAccess. No image " + name);
		title = imp.getTitle();
		create(imp.getStack().getProcessor(1));
	}

	/**
	 * Create an ImageAccess object from a file.
	 * 
	 * @param path
	 *            Path of the file
	 * @param filename
	 *            Name of the file
	 */
	public ImageAccess(String path, String filename) {
		exception(filename == null, "Unable to create an ImageAccess, filename is undefined");
		exception(path == null, "Unable to create an ImageAccess, path is undefined");
		ImagePlus imp = (new Opener()).openImage(path + File.separator + filename);
		exception(imp == null, "Unable to create an ImageAccess. No " + filename);
		title = imp.getTitle();
		create(imp.getStack().getProcessor(1));
	}

	/**
	 * Create an ImageAccess object from the specified ImagePlus.
	 * 
	 * @param imp
	 *            ImagePlus object
	 */
	public ImageAccess(ImagePlus imp) {
		exception(imp == null, "Unable to create an ImageAccess from an ImagePlus");
		title = imp.getTitle();
		create(imp.getProcessor());
	}

	/**
	 * Create an ImageAccess object from the specified ImageProcessor.
	 * 
	 * @param ip
	 *            ImageProcessor object
	 */
	public ImageAccess(ImageProcessor ip) {
		exception(ip == null, "Unable to create an ImageAccess from an ImageProcessor");
		title = " IP " + ip.getWidth() + "x" + ip.getHeight();
		create(ip);
	}

	/**
	 * Create an ImageAccess object from a 2D double array of pixels.
	 * 
	 * The size of the array determines the size of the image.
	 * 
	 * @param array
	 *            Array of pixel (2D)
	 */
	public ImageAccess(double[][] array) {
		exception(array == null, "Unable to create an ImageAccess from a null 2D array");
		this.ny = array[0].length;
		this.nx = array.length;
		exception(nx < 1, "Unable to create an ImageAccess, nx < 1");
		exception(ny < 1, "Unable to create an ImageAccess, ny < 1");
		title = " Array " + nx + "x" + ny;
		pixels = new double[nx * ny];
		int k = 0;
		for (int j = 0; j < ny; j++)
			for (int i = 0; i < nx; i++)
				pixels[k++] = array[i][j];
	}

	/**
	 * Create an ImageAccess object from a 1D double array of pixels.
	 * 
	 * The size of the array should be compatible with the requested size.
	 * 
	 * @param nx
	 *            Horizontal size of the image along the X-axis
	 * @param ny
	 *            Vertical size of the image along the Y-axis
	 * @param array
	 *            Array of pixel (1D) of size nx * ny
	 */
	public ImageAccess(int nx, int ny, double[] array) {
		exception(nx < 1, "Unable to create an ImageAccess, nx < 1");
		exception(ny < 1, "Unable to create an ImageAccess, ny < 1");
		exception(array == null, "Unable to create an ImageAccess from a null 1D array");
		exception(array.length != nx * ny, "Unable to create an ImageAccess. Incompatible size " + nx + "x" + ny);
		this.nx = nx;
		this.ny = ny;
		title = " Array " + nx + "x" + ny;
		pixels = new double[nx * ny];
		System.arraycopy(array, 0, pixels, 0, nx * ny);
	}

	/**
	 * Create an ImageAccess of size [nx, ny].
	 * 
	 * @param nx
	 *            Horizontal size of the image along the X-axis
	 * @param ny
	 *            Vertical size of the image along the Y-axis
	 */
	public ImageAccess(int nx, int ny) {
		exception(nx < 1, "Unable to create an ImageAccess, nx < 1");
		exception(ny < 1, "Unable to create an ImageAccess, ny < 1");
		this.nx = nx;
		this.ny = ny;
		title = " Zero " + nx + "x" + ny;
		pixels = new double[nx * ny];
	}

	/**
	 * Create a new ImageAccess object from the specified ColorProcessor.
	 * 
	 * @param cp
	 *            ColorProcessor object
	 * @param colorPlane
	 *            Index of the color plane 0 (red), 1 (green) or 2 (blue)
	 */
	public ImageAccess(ColorProcessor cp, int colorPlane) {
		exception(colorPlane < 0, "Unable to create an ImageAccess, colorPlane < 0");
		exception(colorPlane > 2, "Unable to create an ImageAccess, colorPlane > 2");
		exception(cp == null, "Unable to create an ImageAccess from an ColorProcessor");
		title = " CP " + cp.getWidth() + "x" + cp.getHeight();
		nx = cp.getWidth();
		ny = cp.getHeight();
		int size = nx * ny;
		pixels = new double[size];
		byte[] r = new byte[size];
		byte[] g = new byte[size];
		byte[] b = new byte[size];
		cp.getRGB(r, g, b);
		if (colorPlane == 0)
			for (int k = 0; k < size; k++)
				pixels[k] = (double) (r[k] & 0xFF);
		else if (colorPlane == 1)
			for (int k = 0; k < size; k++)
				pixels[k] = (double) (g[k] & 0xFF);
		else if (colorPlane == 2)
			for (int k = 0; k < size; k++)
				pixels[k] = (double) (b[k] & 0xFF);
		else
			exception(true, "Unable to create an ImageAccess (color)");
	}

	/**
	 * Create the ImageAccess form a ImageProcessor.
	 * 
	 * @param ip
	 *            ImageProcessor object
	 */
	private void create(ImageProcessor ip) {
		nx = ip.getWidth();
		ny = ip.getHeight();
		int size = nx * ny;
		pixels = new double[size];
		if (ip.getPixels() instanceof byte[]) {
			byte[] bsrc = (byte[]) ip.getPixels();
			for (int k = 0; k < size; k++)
				pixels[k] = (double) (bsrc[k] & 0xFF);

		}
		else if (ip.getPixels() instanceof short[]) {
			short[] ssrc = (short[]) ip.getPixels();
			for (int k = 0; k < size; k++)
				pixels[k] = (double) (ssrc[k] & 0xFFFF);
		}
		else if (ip.getPixels() instanceof float[]) {
			float[] fsrc = (float[]) ip.getPixels();
			for (int k = 0; k < size; k++)
				pixels[k] = (double) fsrc[k];
		}
		else if (ip instanceof ColorProcessor) {
			ColorProcessor cp = (ColorProcessor) ip;
			byte r[] = new byte[size];
			byte g[] = new byte[size];
			byte b[] = new byte[size];
			cp.getRGB(r, g, b);
			for (int k = 0; k < size; k++)
				pixels[k] = ((r[k] & 0xFF) + (g[k] & 0xFF) + (b[k] & 0xFF)) / 3.0;
		}
		else {
			exception(true, "Unable to create an ImageAccess (color)");
		}
	}

	/**
	 * Return the title of the image.
	 * 
	 * @return Title of the image
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * Return the width of the image.
	 * 
	 * @return Image width
	 */
	public int getWidth() {
		return nx;
	}

	/**
	 * Return the height of the image.
	 * 
	 * @return Image height
	 */
	public int getHeight() {
		return ny;
	}

	/**
	 * Return the maximum value of ImageAccess.
	 * 
	 * @return Maximum value
	 */
	public double getMaximum() {
		double maxi = pixels[0];
		for (int i = 1; i < nx * ny; i++)
			if (pixels[i] > maxi)
				maxi = pixels[i];
		return maxi;
	}

	/**
	 * Return the minimum value of ImageAccess.
	 * 
	 * @return Minimum value
	 */
	public double getMinimum() {
		double mini = pixels[0];
		for (int i = 1; i < nx * ny; i++)
			if (pixels[i] < mini)
				mini = pixels[i];
		return mini;
	}

	/**
	 * Return the mean value of ImageAccess.
	 * 
	 * @return the mean value
	 */
	public double getMean() {
		double mean = 0.0;
		for (int i = 0; i < nx * ny; i++)
			mean += pixels[i];
		mean /= (double) (nx * ny);
		return mean;
	}

	/**
	 * Return a copy of the pixel data organized in a 2D array.
	 * 
	 * @return 2D double array representing the image
	 */
	public double[][] getArrayPixels() {
		double[][] array = new double[nx][ny];
		int k = 0;
		for (int j = 0; j < ny; j++)
			for (int i = 0; i < nx; i++)
				array[i][j] = pixels[k++];
		return array;
	}

	/**
	 * Return a reference to the pixel data in double (1D).
	 * 
	 * @return 1D double array
	 */
	public double[] getPixels() {
		return pixels;
	}

	/**
	 * Create a FloatProcessor from the pixel data.
	 * 
	 * The double values of the pixel are simply casted in float.
	 * 
	 * @return FloatProcessor object
	 */
	public FloatProcessor createFloatProcessor() {
		FloatProcessor fp = new FloatProcessor(nx, ny);
		float[] fsrc = new float[nx * ny];
		for (int k = 0; k < nx * ny; k++)
			fsrc[k] = (float) (pixels[k]);
		fp.setPixels(fsrc);
		return fp;
	}

	/**
	 * Create a ByteProcessor from the pixel data.
	 * 
	 * The double values of the pixel are clipped in the [0..255] range.
	 * 
	 * @return ByteProcessor object
	 */
	public ByteProcessor createByteProcessor() {
		ByteProcessor bp = new ByteProcessor(nx, ny);
		byte[] bsrc = new byte[nx * ny];
		double p;
		for (int k = 0; k < nx * ny; k++) {
			p = pixels[k];
			if (p < 0)
				p = 0.0;
			if (p > 255.0)
				p = 255.0;
			bsrc[k] = (byte) Math.round(p);
		}
		bp.setPixels(bsrc);
		return bp;
	}

	/**
	 * Duplicate the current image.
	 * 
	 * @return New ImageAccess object
	 **/
	public ImageAccess duplicate() {
		ImageAccess ia = new ImageAccess(nx, ny);
		for (int i = 0; i < nx * ny; i++)
			ia.pixels[i] = this.pixels[i];
		return ia;
	}

	/**
	 * Get the gray level of a selected pixel.
	 * 
	 * Mirror border conditions are applied.
	 * 
	 * @param x
	 *            X-coordinate of a pixel
	 * @param y
	 *            Y-coordinate of a pixel
	 * @return Gray level of the pixel (double)
	 */
	public double getPixel(int x, int y) {
		int periodx = 2 * nx - 2;
		int periody = 2 * ny - 2;
		if (x < 0) {
			while (x < 0)
				x += periodx; // Periodize
			if (x >= nx)
				x = periodx - x; // Symmetrize
		}
		else if (x >= nx) {
			while (x >= nx)
				x -= periodx; // Periodize
			if (x < 0)
				x = -x; // Symmetrize
		}

		if (y < 0) {
			while (y < 0)
				y += periody; // Periodize
			if (y >= ny)
				y = periody - y; // Symmetrize
		}
		else if (y >= ny) {
			while (y >= ny)
				y -= periody; // Periodize
			if (y < 0)
				y = -y; // Symmetrize
		}
		return pixels[x + y * nx];
	}

	/**
	 * Get the gray level of a selected pixel using a bilinear interpolation.
	 * 
	 * The coordinates can be given in double and the bilinear interpolation is
	 * applied the find the gray level. Mirror border conditions are applied.
	 * 
	 * @param x
	 *            X-coordinate of a pixel
	 * @param y
	 *            Y-coordinate of a pixel
	 * @return Gray level of the pixel (double)
	 */
	public double getInterpolatedPixel(double x, double y) {
		if (Double.isNaN(x))
			return 0;
		if (Double.isNaN(y))
			return 0;

		if (x < 0) {
			int periodx = 2 * nx - 2;
			while (x < 0)
				x += periodx; // Periodize
			if (x >= nx)
				x = periodx - x; // Symmetrize
		}
		else if (x >= nx) {
			int periodx = 2 * nx - 2;
			while (x >= nx)
				x -= periodx; // Periodize
			if (x < 0)
				x = -x; // Symmetrize
		}

		if (y < 0) {
			int periody = 2 * ny - 2;
			while (y < 0)
				y += periody; // Periodize
			if (y >= ny)
				y = periody - y; // Symmetrize
		}
		else if (y >= ny) {
			int periody = 2 * ny - 2;
			while (y >= ny)
				y -= periody; // Periodize
			if (y < 0)
				y = -y; // Symmetrize
		}
		int i;
		if (x >= 0.0)
			i = (int) x;
		else {
			int iAdd = (int) x - 1;
			i = ((int) (x - (double) iAdd) + iAdd);
		}
		int j;
		if (y >= 0.0)
			j = (int) y;
		else {
			int iAdd = (int) y - 1;
			j = ((int) (y - (double) iAdd) + iAdd);
		}

		double dx = x - (double) i;
		double dy = y - (double) j;
		int di;
		if (i >= nx - 1)
			di = -1;
		else
			di = 1;
		int index = i + j * nx;
		double v00 = pixels[index];
		double v10 = pixels[index + di];
		if (j >= ny - 1)
			index -= nx;
		else
			index += nx;
		double v01 = pixels[index];
		double v11 = pixels[index + di];
		return (dx * (v11 * dy - v10 * (dy - 1.0)) - (dx - 1.0) * (v01 * dy - v00 * (dy - 1.0)));
	}

	/**
	 * Get a whole column of this image.
	 * 
	 * @param x
	 *            X-coordinate of a pixel
	 * @return Column as double array
	 */
	public double[] getColumn(int x) {
		double column[] = new double[ny];
		exception(x < 0, "getColumn: x < 0.");
		exception(x >= nx, "getColumn: x >= nx.");
		for (int i = 0; i < ny; i++) {
			column[i] = pixels[x];
			x += nx;
		}
		return column;

	}

	/**
	 * Get a whole row of this image.
	 * 
	 * @param y
	 *            Y-coordinate of a pixel
	 * @return Row as a double array
	 */
	public double[] getRow(int y) {
		double[] row = new double[nx];
		exception(y < 0, "getRow: y < 0.");
		exception(y >= ny, "getRow: y >= ny.");
		y *= nx;
		for (int i = 0; i < nx; i++)
			row[i] = pixels[y++];
		return row;
	}

	/**
	 * Return a neighborhood around a pixel position.
	 * 
	 * <br>
	 * Mirror border conditions are applied. <br>
	 * <br>
	 * The pixel value of (x-n/2, y-n/2) is put into neigh[0][0] <br>
	 * ... <br>
	 * The pixel value of (x+n/2, y+n/2) is put into neigh[n-1][n-1] <br>
	 * <br>
	 * For example if neigh is a double[4][4]: <br>
	 * The pixel value of (x-1, y-1) is put into neigh[0][0] <br>
	 * The pixel value of (x , y ) is put into neigh[1][1] <br>
	 * The pixel value of (x, y+1) is put into neigh[1][2] <br>
	 * The pixel value of (x+1, y-2) is put into neigh[2][0] <br>
	 * ... <br>
	 * For example if neigh is a double[5][5]: <br>
	 * The pixel value of (x-2, y-2) is put into neigh[0][0] <br>
	 * The pixel value of (x-1, y-1) is put into neigh[1][1] <br>
	 * The pixel value of (x , y ) is put into neigh[2][2] <br>
	 * The pixel value of (x, y+1) is put into neigh[2][3] <br>
	 * The pixel value of (x+2, y-2) is put into neigh[4][0]
	 * 
	 * @param x
	 *            X-coordinate of a pixel
	 * @param y
	 *            Y-coordinate of a pixel
	 * @return Neighborhood, a 2D double array
	 */
	public double[][] getNeighborhood(int x, int y, int mx, int my) {
		double neigh[][] = new double[mx][my];
		int bx = neigh.length;
		int by = neigh[0].length;
		int bx2 = (bx - 1) / 2;
		int by2 = (by - 1) / 2;
		if (x >= bx2)
			if (y >= by2)
				if (x < nx - bx2 - 1)
					if (y < ny - by2 - 1) {
						int index = (y - by2) * nx + (x - bx2);
						for (int j = 0; j < by; j++) {
							for (int i = 0; i < bx; i++) {
								neigh[i][j] = pixels[index++];
							}
							index += (nx - bx);
						}
						return neigh;
					}
		int xt[] = new int[bx];
		for (int k = 0; k < bx; k++) {
			int xa = x + k - bx2;
			int periodx = 2 * nx - 2;
			while (xa < 0)
				xa += periodx; // Periodize
			while (xa >= nx) {
				xa = periodx - xa; // Symmetrize
				if (xa < 0)
					xa = -xa;
			}
			xt[k] = xa;
		}
		int yt[] = new int[by];
		for (int k = 0; k < by; k++) {
			int ya = y + k - by2;
			int periody = 2 * ny - 2;
			while (ya < 0)
				ya += periody; // Periodize
			while (ya >= ny) {
				ya = periody - ya; // Symmetrize
				if (ya < 0)
					ya = -ya;
			}
			yt[k] = ya;
		}
		int sum = 0;
		for (int j = 0; j < by; j++) {
			int index = yt[j] * nx;
			for (int i = 0; i < bx; i++) {
				sum = index + xt[i];
				neigh[i][j] = pixels[sum];
			}
		}
		return neigh;
	}

	/**
	 * Return a sub-image from this image.
	 * 
	 * @param x
	 *            X-coordinate of a pixel
	 * @param y
	 *            Y-coordinate of a pixel
	 * @param mx
	 *            Horizontal size of sub-image
	 * @param my
	 *            Vertical size of sub-image
	 * @return Sub-image
	 */
	public ImageAccess getSubImage(int x, int y, int mx, int my) {
		exception(x < 0, "getSubImage: Incompatible image size");
		exception(y < 0, "getSubImage: Incompatible image size");
		exception(x + mx >= nx, "getSubImage: Incompatible image size");
		exception(y + my >= ny, "getSubImage: Incompatible image size");
		int nx2 = (mx - 1) / 2;
		int ny2 = (my - 1) / 2;
		double neigh[][] = getNeighborhood(x + nx2, y + ny2, mx, my);
		return new ImageAccess(neigh);
	}

	/**
	 * Put a pixel value to a specified position.
	 * 
	 * @param x
	 *            X-coordinate of a pixel
	 * @param y
	 *            Y-coordinate of a pixel
	 * @param value
	 *            Value of the gray level
	 */
	public void putPixel(int x, int y, double value) {
		if (x < 0)
			return;
		if (x >= nx)
			return;
		if (y < 0)
			return;
		if (y >= ny)
			return;
		pixels[x + y * nx] = value;
	}

	/**
	 * Put a whole column in a specified position into this image.
	 * 
	 * @param x
	 *            X-coordinate of a pixel
	 * @param column
	 *            1D array of the type double
	 */
	public void putColumn(int x, double[] column) {
		exception(x < 0, "putColumn: x < 0.");
		exception(x >= nx, "putColumn: x >= nx.");
		exception(column == null, "putColumn: column == null.");
		exception(column.length != ny, "putColumn: column.length != ny.");
		for (int i = 0; i < ny; i++) {
			pixels[x] = column[i];
			x += nx;
		}
	}

	/**
	 * Put a whole row in a specified position into this image.
	 * 
	 * @param y
	 *            Y-coordinate of a pixel
	 * @param row
	 *            1D Array of the type double
	 */
	public void putRow(int y, double[] row) {
		exception(y < 0, "putRow: y < 0.");
		exception(y >= ny, "putRow: y >= ny.");
		exception(row == null, "putRow: row == null.");
		exception(row.length != nx, "putRow: row.length != nx.");
		y *= nx;
		for (int i = 0; i < nx; i++) {
			pixels[y++] = row[i];
		}

	}

	/**
	 * Put an 2D array into this image.
	 * 
	 * @param array
	 *            Double array to out into this image
	 */
	public void putArrayPixels(double[][] array) {
		exception(array == null, "putArrayPixels: array == null.");
		int bx = array.length;
		int by = array[0].length;
		exception(bx * by != nx * ny, "putArrayPixels: imcompatible size.");
		int k = 0;
		for (int j = 0; j < by; j++)
			for (int i = 0; i < bx; i++)
				pixels[k++] = array[i][j];
	}

	/**
	 * Put a sub-image with the upper left corner in the coordinate (x,y).
	 * 
	 * The sub-image input should be already created.
	 * 
	 * @param x
	 *            X-coordinate of a pixel
	 * @param y
	 *            Y-coordinate of a pixel
	 * @param subimage
	 *            ImageAccess object to insert into this image
	 */
	public void putSubImage(int x, int y, ImageAccess subimage) {
		exception(subimage == null, "putSubImage: subimage == null");
		exception(x < 0, "putSubImage: x < 0.");
		exception(y < 0, "putSubImage: y < 0.");
		exception(x >= nx, "putSubImage: x >= nx.");
		exception(y >= ny, "putSubImage: y >= ny.");
		int nxcopy = subimage.getWidth();
		int nycopy = subimage.getHeight();
		// Reduces the size of the area to copy if it is too large
		if (x + nxcopy > nx)
			nxcopy = nx - x;
		if (y + nycopy > ny)
			nycopy = ny - y;
		// Copies lines per lines
		double[] dsrc = subimage.getPixels();
		for (int j = 0; j < nycopy; j++)
			System.arraycopy(dsrc, j * nxcopy, pixels, (j + y) * nx + x, nxcopy);
	}

	/**
	 * Set a constant value to all pixels of this image.
	 * 
	 * @param constant
	 *            Constant value
	 */
	public void setConstant(double constant) {
		for (int k = 0; k < nx * ny; k++)
			pixels[k] = constant;
	}

	/**
	 * Set the title of the image
	 * 
	 * @param title
	 *            Title of the image
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * Compute the square root of an ImageAccess.
	 */
	public void sqrt() {
		for (int k = 0; k < nx * ny; k++) {
			pixels[k] = Math.sqrt(pixels[k]);
		}
	}

	/**
	 * Raised an ImageAccess object to the power a.
	 * 
	 * @param a
	 *            Power value
	 */
	public void pow(double a) {
		for (int k = 0; k < nx * ny; k++) {
			pixels[k] = Math.pow(pixels[k], a);
		}
	}

	/**
	 * Add a constant to each pixel of this image.
	 * 
	 * @param constant
	 *            Constant value to be added
	 */
	public void add(double constant) {
		for (int k = 0; k < nx * ny; k++)
			pixels[k] += constant;
	}

	/**
	 * Multiply a constant to each pixel of this image.
	 * 
	 * @param constant
	 *            Constant value to be multiplied
	 */
	public void multiply(double constant) {
		for (int k = 0; k < nx * ny; k++)
			pixels[k] *= constant;
	}

	/**
	 * Subtract a constant to each pixels of this image.
	 * 
	 * @param constant
	 *            Constant to be subtracted
	 */
	public void subtract(double constant) {
		for (int k = 0; k < nx * ny; k++)
			pixels[k] -= constant;
	}

	/**
	 * Divide a constant value to each pixel of this image.
	 * 
	 * @param constant
	 *            Constant to be divided
	 */
	public void divide(double constant) {
		exception(constant == 0, "divide: Divide by 0");
		for (int k = 0; k < nx * ny; k++)
			pixels[k] /= constant;
	}

	/**
	 * Add a ImageAccess object to this ImageAccess (pixelwise mode).
	 * 
	 * @param a
	 *            Image to add
	 */
	public void add(ImageAccess a) {
		exception(nx != a.nx, "Size do not match");
		exception(ny != a.ny, "Size do not match");
		exception(a == null, "ImageAccess object is null");
		double[] p1 = getPixels();
		double[] p2 = a.getPixels();
		for (int k = 0; k < nx * ny; k++)
			p1[k] += p2[k];
	}

	/**
	 * Subtract a ImageAccess object to this ImageAccess (pixelwise mode).
	 * 
	 * @param a
	 *            Image to subtract
	 */
	public void subtract(ImageAccess a) {
		exception(nx != a.nx, "Size do not match");
		exception(ny != a.ny, "Size do not match");
		exception(a == null, "ImageAccess object is null");
		double[] p1 = getPixels();
		double[] p2 = a.getPixels();
		for (int k = 0; k < nx * ny; k++)
			p1[k] -= p2[k];
	}

	/**
	 * Multiply a ImageAccess object to this ImageAccess (pixelwise mode).
	 * 
	 * @param a
	 *            Image to multiply
	 */
	public void multiply(ImageAccess a) {
		exception(nx != a.nx, "Size do not match");
		exception(ny != a.ny, "Size do not match");
		exception(a == null, "ImageAccess object is null");
		double[] p1 = getPixels();
		double[] p2 = a.getPixels();
		for (int k = 0; k < nx * ny; k++)
			p1[k] *= p2[k];
	}

	/**
	 * Divide this image by by an ImageAccess object (pixelwise mode).
	 * 
	 * @param a
	 *            Dividend image
	 */
	public void divide(ImageAccess a) {
		exception(nx != a.nx, "Size do not match");
		exception(ny != a.ny, "Size do not match");
		exception(a == null, "ImageAccess object is null");
		double[] p1 = getPixels();
		double[] p2 = a.getPixels();
		for (int k = 0; k < nx * ny; k++)
			p1[k] /= p2[k];
	}

	/**
	 * Send an exception.
	 */
	private void exception(boolean sendException, String message) {
		if (!sendException)
			return;

		Throwable throwable = new Throwable();
		throwable.initCause(new Exception(message));
		StackTraceElement[] traces = throwable.getStackTrace();
		for (int i = 0; i < Math.min(10, traces.length); i++) {
			String c = traces[i].getClassName();
			String m = traces[i].getMethodName();
			String l = "" + traces[i].getLineNumber();
			String f = traces[i].getFileName();
			if (m.startsWith("<init>"))
				m = traces[i].getClassName();
			if (!c.startsWith("ij") && !c.startsWith("sun") && !c.startsWith("java") && !c.startsWith("iplab")) {
				System.out.println(new SimpleDateFormat("dd-MM HH:mm:ss").format(new Date()));
				System.out.println(message);
				System.out.println("Error at " + c + "." + m + "(). Check the line " + l + " in the file " + f);
			}
		}
		throw new RuntimeException();
	}

	/**
	 * Show an image (ImageAccess object).
	 * 
	 * @return Display object
	 */
	public Display show() {
		return show("Untitled");
	}

	/**
	 * Show an image (ImageAccess object) and set the title.
	 * 
	 * @param title
	 *            Title of the window image
	 * @return Display object
	 */
	public Display show(String title) {
		exception(title == null, "Impossible to display this image, title is undefined");
		return new Display(this, title);
	}

	/**
	 * Class Display. This class handle the overlay display of an ImageAccess
	 */
	static public class Display {

		private Color		color	= new Color(250, 0, 00);
		private double		stroke	= 1;						// width
		private ImagePlus	imp;

		/**
		 * Create a new Display object.
		 */
		public Display(ImageAccess image, String title) {
			FloatProcessor fp = image.createFloatProcessor();
			ImageStack stack = new ImageStack(fp.getWidth(), fp.getHeight());
			stack.addSlice("", fp);
			display(title, stack);
		}

		/**
		 * Create a new Display object.
		 * 
		 * @param rgb
		 *            true the 3 ImageAccess objects are shown in RGB. false,
		 *            the 3 ImageAccess objects are shown in HSB.
		 */
		public Display(boolean rgb, ImageAccess c1, ImageAccess c2, ImageAccess c3, String title) {
			int nx = c1.nx;
			int ny = c1.ny;
			ColorProcessor cp;
			if (rgb) {
				cp = new ColorProcessor(nx, ny);
				byte r[] = new byte[nx * ny];
				if (c1 != null)
					r = (byte[]) (c1.createByteProcessor().getPixels());
				byte g[] = new byte[nx * ny];
				if (c2 != null)
					g = (byte[]) (c2.createByteProcessor().getPixels());
				byte b[] = new byte[nx * ny];
				if (c3 != null)
					b = (byte[]) (c3.createByteProcessor().getPixels());
				cp.setRGB(r, g, b);
			}
			else {
				int pixels[] = new int[nx * ny];
				for (int k = 0; k < nx * ny; k++) {
					float h = 0;
					if (c1 != null)
						h = (float) (c1.pixels[k] / Math.PI);
					float s = 0;
					if (c2 != null)
						s = (float) (c2.pixels[k] / 255.0);
					float b = 0;
					if (c3 != null)
						b = (float) (c3.pixels[k] / 255.0);
					h = Math.max(0f, Math.min(1f, h));
					s = Math.max(0f, Math.min(1f, s));
					b = Math.max(0f, Math.min(1f, b));
					pixels[k] = Color.HSBtoRGB(h, s, b);
				}
				cp = new ColorProcessor(nx, ny, pixels);
			}
			ImageStack stack = new ImageStack(cp.getWidth(), cp.getHeight());
			stack.addSlice("", cp);
			display(title, stack);
		}

		/**
		 * Create a new Display object.
		 */
		public Display(ImageAccess images[], String title) {
			ImageStack stack = new ImageStack(images[0].nx, images[0].ny);
			for (int i = 0; i < images.length; i++) {
				if (images[i] != null) {
					FloatProcessor fp = images[i].createFloatProcessor();
					fp.resetMinAndMax();
					stack.addSlice("" + i, fp);
				}
			}
			display(title, stack);
		}

		/**
		 * Change the location of the image window in the screen.
		 * 
		 * @param x
		 *            Horizontal position
		 * @param y
		 *            Vertical position
		 */
		public void setLocation(int x, int y) {
			exception(imp == null, "Impossible to find a display");
			ij.gui.ImageWindow window = imp.getWindow();
			window.setLocation(x, y);
		}

		/**
		 * Change the color of the next overlay compound.
		 * 
		 * @param red
		 *            Value for red, between 0 and 255
		 * @param green
		 *            Value for green, between 0 and 255
		 * @param blue
		 *            Value for blue, between 0 and 255
		 * @param transparency
		 *            Value for transparency, between 0 and 255
		 */
		public void setColor(int red, int green, int blue, int transparency) {
			red = Math.max(0, Math.min(255, red));
			green = Math.max(0, Math.min(255, green));
			blue = Math.max(0, Math.min(255, blue));
			transparency = Math.max(0, Math.min(255, transparency));
			color = new Color(red, green, blue, transparency);
		}

		/**
		 * Change the color of the next overlay compound, opaque.
		 * 
		 * @param red
		 *            Value for red, between 0 and 255
		 * @param green
		 *            Value for green, between 0 and 255
		 * @param blue
		 *            Value for blue, between 0 and 255
		 */
		public void setColor(int red, int green, int blue) {
			setColor(red, green, blue, 255);
		}

		/**
		 * Change the stroke (thickness) of the next overlay compound.
		 * 
		 * @param stroke
		 */
		public void setStroke(int stroke) {
			this.stroke = stroke;
		}

		/**
		 * Print a message as overlay into a image.
		 * 
		 * @param x
		 *            Horizontal position of the message
		 * @param y
		 *            Vertical position of the message
		 * @param text
		 *            Message to print
		 */
		public void overlayText(int x, int y, String text) {
			exception(imp == null, "Impossible to find a display");
			Overlay overlay = imp.getOverlay();
			TextRoi roi = new TextRoi(x, y, text);
			overlay.add(roi);
			Roi r = overlay.get(overlay.size() - 1);
			r.setStrokeColor(color);
			r.setStrokeWidth(stroke);
		}

		/**
		 * Print a numerical value as overlay into a image with a prefix.
		 * 
		 * @param x
		 *            Horizontal position of the message
		 * @param y
		 *            Vertical position of the message
		 * @param prefix
		 *            Prefix
		 * @param value
		 *            Value to print
		 * @param numberOfDigits
		 *            Number of digits of the value to print
		 */
		public void overlayValue(int x, int y, String prefix, double value, int numberOfDigits) {
			exception(imp == null, "Impossible to find a display");
			Overlay overlay = imp.getOverlay();
			TextRoi roi = new TextRoi(x, y, prefix + IJ.d2s(value, numberOfDigits));
			overlay.add(roi);
			Roi r = overlay.get(overlay.size() - 1);
			r.setStrokeColor(color);
			r.setStrokeWidth(stroke);
		}

		/**
		 * Print a numerical value as overlay into a image with a prefix, 2
		 * decimal digits.
		 * 
		 * @param x
		 *            Horizontal position of the message
		 * @param y
		 *            Vertical position of the message
		 * @param prefix
		 *            Prefix
		 * @param value
		 *            Value to print
		 */
		public void overlayValue(int x, int y, String prefix, double value) {
			overlayValue(x, y, prefix, value, 2);
		}

		/**
		 * Print a numerical value as overlay into a image, 2 decimal digits.
		 * 
		 * @param x
		 *            Horizontal position of the message
		 * @param y
		 *            Vertical position of the message
		 * @param value
		 *            Value to print
		 */
		public void overlayValue(int x, int y, double value) {
			overlayValue(x, y, "", value, 2);
		}

		/**
		 * Draw a line overlaid over the image.
		 * 
		 * @param x1
		 *            Horizontal position of the first extremity
		 * @param y1
		 *            Vertical position of the first extremity
		 * @param x2
		 *            Horizontal position of the second extremity
		 * @param y2
		 *            Vertical position of the second extremity
		 */
		public void overlayLine(int x1, int y1, int x2, int y2) {
			exception(imp == null, "Impossible to find a display");
			Overlay overlay = imp.getOverlay();
			Line roi = new Line(x1, y1, x2, y2);
			overlay.add(roi);
			Roi r = overlay.get(overlay.size() - 1);
			r.setStrokeColor(color);
			r.setStrokeWidth(stroke);
		}

		/**
		 * Draw a cross overlaid over the image.
		 * 
		 * @param x
		 *            Horizontal position of the cross
		 * @param y
		 *            Vertical position of the cross
		 * @param length
		 *            Size of the cross
		 */
		public void overlayCross(int x, int y, int length) {
			overlayLine(x - length / 2, y, x + length / 2, y);
			overlayLine(x, y - length / 2, x, y + length / 2);
		}

		/**
		 * Draw a circle overlaid over the image.
		 * 
		 * @param x
		 *            Horizontal position of the center of the circle
		 * @param y
		 *            Vertical position of the center of the circle
		 * @param radius
		 *            Radius of the circle
		 */
		public void overlayCircle(int x, int y, int radius) {
			exception(imp == null, "Impossible to find a display");
			Overlay overlay = imp.getOverlay();
			OvalRoi roi = new OvalRoi(x - radius / 2, y - radius / 2, radius, radius);
			overlay.add(roi);
			Roi r = overlay.get(overlay.size() - 1);
			r.setStrokeColor(color);
			r.setStrokeWidth(stroke);
		}

		/**
		 * Clear all the overlay components.
		 */
		public void clear() {
			exception(imp == null, "Impossible to find a display");
			Overlay overlay = imp.getOverlay();
			overlay.clear();
		}

		/**
		 * Display the image and all the overlays.
		 * 
		 * @param stack
		 *            Image to display
		 * @param title
		 *            Title of the window image
		 * @return a reference to the ImagePlus image window
		 */
		private void display(String title, ImageStack stack) {
			imp = new ImagePlus(title, stack);
			imp.show();
			StackWindow window = new StackWindow(imp) {
				@Override
				public String createSubtitle() {
					String s = super.createSubtitle();
					String time = (new SimpleDateFormat("hh:mm:ss")).format(new Date());
					try {
						InetAddress inet = InetAddress.getLocalHost();
						return inet.getHostAddress() + " | " + time + " | " + s;
					}
					catch (Exception e) {
						e.printStackTrace();
						return "No IP" + " | " + time + " | " + s;
					}
				}
			};
			window.createSubtitle();
			imp.setWindow(window);
			imp.setOverlay(new Overlay());
			imp.updateAndDraw();
		}

		/**
		 * Send an exception.
		 */
		private void exception(boolean sendException, String message) {
			if (!sendException)
				return;

			Throwable throwable = new Throwable();
			throwable.initCause(new Exception(message));
			StackTraceElement[] traces = throwable.getStackTrace();
			for (int i = 0; i < Math.min(10, traces.length); i++) {
				String c = traces[i].getClassName();
				String m = traces[i].getMethodName();
				String l = "" + traces[i].getLineNumber();
				String f = traces[i].getFileName();
				if (m.startsWith("<init>"))
					m = traces[i].getClassName();
				if (!c.startsWith("ij") && !c.startsWith("sun") && !c.startsWith("java") && !c.startsWith("iplab")) {
					System.out.println(new SimpleDateFormat("dd-MM HH:mm:ss").format(new Date()));
					System.out.println(message);
					System.out.println("Error at " + c + "." + m + "(). Check the line " + l + " in the file " + f);
				}
			}
			throw new RuntimeException();
		}
	}

	/**
	 * Class Stack.
	 */
	static public class Stack {

		/**
		 * Return an array of n ImageAccess containing the n grayscale frames
		 * from an ImagePlus color image.
		 * 
		 * @param imp
		 *            ImagePlus object
		 * @return Array of N ImageAccess
		 */
		static public ImageAccess[] create(ImagePlus imp) {
			int n = imp.getStack().getSize();
			ImageAccess out[] = new ImageAccess[n];
			for (int i = 0; i < n; i++)
				out[i] = new ImageAccess(imp.getStack().getProcessor(i + 1));
			return out;
		}
	}

	/**
	 * Class RGB.
	 */
	static public class RGB {

		/**
		 * Return an array of 3 ImageAccess containing the three color planes
		 * from an ImagePlus color image.
		 * 
		 * @param imp
		 *            ImagePlus object
		 * @return Array of 3 ImageAccess
		 */
		static public ImageAccess[] create(ImagePlus imp) {
			ImageProcessor ip = imp.getStack().getProcessor(1);
			ColorProcessor cp = (ColorProcessor) ip;
			ImageAccess planes[] = new ImageAccess[3];
			planes[0] = new ImageAccess(cp, 0);
			planes[1] = new ImageAccess(cp, 1);
			planes[2] = new ImageAccess(cp, 2);
			return planes;
		}
	}
}
